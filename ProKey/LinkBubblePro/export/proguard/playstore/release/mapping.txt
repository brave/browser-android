com.android.vending.licensing.ILicensingService -> com.android.vending.licensing.ILicensingService:
com.google.android.vending.licensing.AESObfuscator -> ･:
    byte[] IV -> ･
    javax.crypto.Cipher mEncryptor -> ˊ
    javax.crypto.Cipher mDecryptor -> ˋ
    byte[] $ -> ˎ
    int $$ -> ˏ
    76:91:java.lang.String obfuscate(java.lang.String,java.lang.String) -> ･
    96:122:java.lang.String unobfuscate(java.lang.String,java.lang.String) -> ˊ
    java.lang.String $(int,int,int) -> ･
com.google.android.vending.licensing.DeviceLimiter -> if:
com.google.android.vending.licensing.ILicenseResultListener -> ˊ:
    void verifyLicense(int,java.lang.String,java.lang.String) -> ･
com.google.android.vending.licensing.ILicenseResultListener$Stub -> ˊ$･:
    byte[] $ -> ･
    29:36:com.google.android.vending.licensing.ILicenseResultListener asInterface(android.os.IBinder) -> ･
    40:40:android.os.IBinder asBinder() -> asBinder
    44:64:boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
    java.lang.String $(int,int,int) -> ･
com.google.android.vending.licensing.ILicenseResultListener$Stub$Proxy -> ˊ$･$･:
    android.os.IBinder mRemote -> ･
    byte[] $ -> ˊ
    75:75:android.os.IBinder asBinder() -> asBinder
    83:93:void verifyLicense(int,java.lang.String,java.lang.String) -> ･
com.google.android.vending.licensing.ILicensingService -> If:
    void checkLicense(long,java.lang.String,com.google.android.vending.licensing.ILicenseResultListener) -> ･
com.google.android.vending.licensing.ILicensingService$Stub -> If$･:
    byte[] $ -> ･
    29:36:com.google.android.vending.licensing.ILicensingService asInterface(android.os.IBinder) -> ･
    44:64:boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
    java.lang.String $(int,int,int) -> ･
com.google.android.vending.licensing.ILicensingService$Stub$Proxy -> If$･$･:
    android.os.IBinder mRemote -> ･
    byte[] $ -> ˊ
    75:75:android.os.IBinder asBinder() -> asBinder
    83:93:void checkLicense(long,java.lang.String,com.google.android.vending.licensing.ILicenseResultListener) -> ･
com.google.android.vending.licensing.LicenseChecker -> ˋ:
    java.security.SecureRandom RANDOM -> ･
    com.google.android.vending.licensing.ILicensingService mService -> ˊ
    java.security.PublicKey mPublicKey -> ˋ
    android.content.ContextWrapper mContext$48463d4e -> ˎ
    com.google.android.vending.licensing.ServerManagedPolicy mPolicy$62321a76 -> ˏ
    android.os.Handler mHandler -> ᐝ
    java.lang.String mPackageName -> ʻ
    java.lang.String mVersionCode -> ʼ
    java.util.HashSet mChecksInProgress$5a95723b -> ʽ
    java.util.LinkedList mPendingChecks$d8ff40a -> ͺ
    byte[] $ -> ι
    int $$ -> ʾ
    110:124:java.security.PublicKey generatePublicKey(java.lang.String) -> ･
    140:170:void checkAccess(com.google.android.vending.licensing.LicenseCheckerCallback) -> ･
    174:186:void runChecks() -> ˊ
    189:193:void finishCheck(com.google.android.vending.licensing.LicenseValidator) -> ･
    274:276:void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    282:284:void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
    291:298:void handleServiceConnectionError(com.google.android.vending.licensing.LicenseValidator) -> ˊ
    302:312:void cleanupService() -> ˋ
    323:325:void onDestroy() -> ･
    341:345:java.lang.String getVersionCode$5b1592bd(android.content.ContextWrapper,java.lang.String) -> ･
    58:58:void access$100(com.google.android.vending.licensing.LicenseChecker,com.google.android.vending.licensing.LicenseValidator) -> ･
    58:58:void access$200(com.google.android.vending.licensing.LicenseChecker,com.google.android.vending.licensing.LicenseValidator) -> ˊ
    58:58:java.util.HashSet access$300$128ef11c(com.google.android.vending.licensing.LicenseChecker) -> ･
    58:58:java.security.PublicKey access$500(com.google.android.vending.licensing.LicenseChecker) -> ˊ
    58:58:android.os.Handler access$600(com.google.android.vending.licensing.LicenseChecker) -> ˋ
    java.lang.String $(int,int,int) -> ･
com.google.android.vending.licensing.LicenseChecker$ResultListener -> ˋ$･:
    com.google.android.vending.licensing.LicenseValidator mValidator -> ˊ
    com.google.android.vending.licensing.LicenseChecker$ResultListener$1 mOnTimeout$453f5682 -> ˋ
    com.google.android.vending.licensing.LicenseChecker this$0 -> ･
    byte[] $ -> ˎ
    int $$ -> ˏ
    219:260:void verifyLicense(int,java.lang.String,java.lang.String) -> ･
    195:195:com.google.android.vending.licensing.LicenseValidator access$000(com.google.android.vending.licensing.LicenseChecker$ResultListener) -> ･
    195:195:void access$400(com.google.android.vending.licensing.LicenseChecker$ResultListener) -> ˊ
    java.lang.String $(int,int,int) -> ･
com.google.android.vending.licensing.LicenseChecker$ResultListener$1 -> iF:
    com.google.android.vending.licensing.LicenseChecker val$this$0 -> ･
    com.google.android.vending.licensing.LicenseChecker$ResultListener this$1 -> ˊ
    byte[] $ -> ˋ
    203:206:void run() -> run
    java.lang.String $(int,int,int) -> ･
com.google.android.vending.licensing.LicenseChecker$ResultListener$2 -> ˎ:
    int val$responseCode -> ･
    java.lang.String val$signedData -> ˊ
    java.lang.String val$signature -> ˋ
    com.google.android.vending.licensing.LicenseChecker$ResultListener this$1 -> ˎ
    byte[] $ -> ˏ
    221:258:void run() -> run
    java.lang.String $(int,int,int) -> ･
com.google.android.vending.licensing.LicenseCheckerCallback -> IF:
    void allow(int) -> ･
    void dontAllow(int) -> ˊ
    void applicationError(int) -> ˋ
com.google.android.vending.licensing.LicenseValidator -> ˏ:
    com.google.android.vending.licensing.ServerManagedPolicy mPolicy$62321a76 -> ʻ
    com.google.android.vending.licensing.LicenseCheckerCallback mCallback -> ･
    int mNonce -> ˊ
    java.lang.String mPackageName -> ˋ
    java.lang.String mVersionCode -> ˎ
    com.google.android.vending.licensing.DeviceLimiter mDeviceLimiter -> ʼ
    byte[] $ -> ˏ
    int $$ -> ᐝ
    212:221:void handleResponse(int,com.google.android.vending.licensing.ResponseData) -> ･
    java.lang.String $(int,int,int) -> ･
com.google.android.vending.licensing.Obfuscator -> aux:
    java.lang.String obfuscate(java.lang.String,java.lang.String) -> ･
    java.lang.String unobfuscate(java.lang.String,java.lang.String) -> ˊ
com.google.android.vending.licensing.Policy -> ᐝ:
    void processServerResponse(int,com.google.android.vending.licensing.ResponseData) -> ･
    boolean allowAccess() -> ･
com.google.android.vending.licensing.PreferenceObfuscator -> Aux:
    android.content.SharedPreferences mPreferences -> ˊ
    com.google.android.vending.licensing.Obfuscator mObfuscator -> ˋ
    android.content.SharedPreferences$Editor mEditor -> ･
    byte[] $ -> ˎ
    47:52:void putString(java.lang.String,java.lang.String) -> ･
    56:69:java.lang.String getString(java.lang.String,java.lang.String) -> ˊ
    java.lang.String $(int,int,int) -> ･
com.google.android.vending.licensing.ResponseData -> ʻ:
    int responseCode -> ･
    int nonce -> ˊ
    java.lang.String packageName -> ˋ
    java.lang.String versionCode -> ˎ
    java.lang.String userId -> ˏ
    long timestamp -> ᐝ
    java.lang.String extra -> ʻ
    79:79:java.lang.String toString() -> toString
com.google.android.vending.licensing.ServerManagedPolicy -> aUx:
    long mValidityTimestamp -> ･
    long mRetryUntil -> ˊ
    long mMaxRetries -> ˋ
    long mRetryCount -> ˎ
    long mLastResponseTime -> ˏ
    int mLastResponse -> ᐝ
    com.google.android.vending.licensing.PreferenceObfuscator mPreferences -> ʻ
    byte[] $ -> ʼ
    int $$ -> ʽ
    106:128:void processServerResponse(int,com.google.android.vending.licensing.ResponseData) -> ･
    150:152:void setRetryCount(long) -> ･
    168:178:void setValidityTimestamp(java.lang.String) -> ･
    194:204:void setRetryUntil(java.lang.String) -> ˊ
    220:230:void setMaxRetries(java.lang.String) -> ˋ
    247:260:boolean allowAccess() -> ･
    264:274:java.util.HashMap decodeExtras$694ad9f4(java.lang.String) -> ˎ
    java.lang.String $(int,int,int) -> ･
com.google.android.vending.licensing.ValidationException -> com.google.android.vending.licensing.ValidationException:
    long serialVersionUID -> serialVersionUID
com.google.android.vending.licensing.util.Base64 -> ʼ:
    byte[] ALPHABET -> ･
    byte[] DECODABET -> ˊ
    boolean $assertionsDisabled -> ˋ
    247:247:java.lang.String encode(byte[]) -> ･
    378:406:int decode4to3$355785af(byte[],byte[],int,byte[]) -> ･
    419:420:byte[] decode(java.lang.String) -> ･
com.google.android.vending.licensing.util.Base64DecoderException -> com.google.android.vending.licensing.util.Base64DecoderException:
    long serialVersionUID -> serialVersionUID
com.linkbubble.prokey.Constant -> AUx:
    byte[] SALT -> ･
com.linkbubble.prokey.MainActivity -> com.linkbubble.prokey.MainActivity:
    android.widget.TextView mStatusText -> ･
    android.widget.TextView mKeepInstalledText -> ˊ
    android.widget.TextView mErrorText -> ˋ
    android.widget.Button mLicenseButton -> ˎ
    android.widget.Button mRetryButton -> ˏ
    android.widget.ImageView mImage -> ᐝ
    com.linkbubble.prokey.MainActivity$MyLicenseCheckerCallback mLicenseCheckerCallback$3b3082fd -> ʻ
    com.google.android.vending.licensing.LicenseChecker mChecker -> ʼ
    android.os.Handler mHandler -> ʽ
    android.content.pm.ActivityInfo mLinkBubbleApp -> ͺ
    int mLicenseState -> ι
    byte[] $ -> ʾ
    45:99:void onCreate(android.os.Bundle) -> onCreate
    104:118:void onResume() -> onResume
    128:171:void setLicenseState(int,java.lang.String,int) -> ･
    174:179:void doCheck() -> ･
    217:219:void onDestroy() -> onDestroy
    26:26:int access$000(com.linkbubble.prokey.MainActivity) -> ･
    26:26:android.content.pm.ActivityInfo access$100(com.linkbubble.prokey.MainActivity) -> ˊ
    26:26:android.widget.Button access$200(com.linkbubble.prokey.MainActivity) -> ˋ
    26:26:void access$300(com.linkbubble.prokey.MainActivity) -> ˎ
    26:26:android.widget.ImageView access$500(com.linkbubble.prokey.MainActivity) -> ˏ
    26:26:android.widget.TextView access$600(com.linkbubble.prokey.MainActivity) -> ᐝ
    26:26:android.widget.TextView access$700(com.linkbubble.prokey.MainActivity) -> ʻ
    26:26:android.widget.TextView access$800(com.linkbubble.prokey.MainActivity) -> ʼ
    26:26:android.widget.Button access$900(com.linkbubble.prokey.MainActivity) -> ʽ
    java.lang.String $(int,int,int) -> ･
com.linkbubble.prokey.MainActivity$1 -> ʽ:
    com.linkbubble.prokey.MainActivity this$0 -> ･
    57:72:void onClick(android.view.View) -> onClick
com.linkbubble.prokey.MainActivity$2 -> auX:
    com.linkbubble.prokey.MainActivity this$0 -> ･
    80:81:void onClick(android.view.View) -> onClick
com.linkbubble.prokey.MainActivity$3 -> ͺ:
    int val$policyReason -> ･
    java.lang.String val$reasonAsString -> ˊ
    com.linkbubble.prokey.MainActivity this$0 -> ˋ
    137:168:void run() -> run
com.linkbubble.prokey.MainActivity$MyLicenseCheckerCallback -> com.linkbubble.prokey.MainActivity$･:
    com.linkbubble.prokey.MainActivity this$0 -> ･
    183:190:void allow(int) -> ･
    193:208:void dontAllow(int) -> ˊ
    211:212:void applicationError(int) -> ˋ
com.linkbubble.prokey.ProMessengerService -> com.linkbubble.prokey.ProMessengerService:
    com.linkbubble.prokey.ProMessengerService$MyLicenseCheckerCallback mLicenseCheckerCallback$3b3082fd -> ˋ
    com.google.android.vending.licensing.LicenseChecker mChecker -> ˎ
    android.os.Messenger mMessenger -> ˏ
    android.os.Messenger mReplyTo -> ･
    int mRetryCount -> ˊ
    int mLicenseState -> ᐝ
    byte[] $ -> ʻ
    93:103:android.os.IBinder onBind(android.content.Intent) -> onBind
    109:110:boolean onUnbind(android.content.Intent) -> onUnbind
    124:157:void setLicenseState(int,java.lang.Integer) -> ･
    24:24:void access$000(com.linkbubble.prokey.ProMessengerService) -> ･
    java.lang.String $(int,int,int) -> ･
com.linkbubble.prokey.ProMessengerService$IncomingHandler -> com.linkbubble.prokey.ProMessengerService$･:
    com.linkbubble.prokey.ProMessengerService this$0 -> ･
    52:79:void handleMessage(android.os.Message) -> handleMessage
com.linkbubble.prokey.ProMessengerService$MyLicenseCheckerCallback -> com.linkbubble.prokey.ProMessengerService$if:
    com.linkbubble.prokey.ProMessengerService this$0 -> ･
    164:165:void allow(int) -> ･
    180:191:void dontAllow(int) -> ˊ
    194:200:void applicationError(int) -> ˋ
dexguard.util.TamperDetection -> AuX:
    byte[] a -> ･
    int checkApk$faab21a(android.content.ContextWrapper) -> ･
    java.lang.String a(int,int,int) -> ･
