# Custom options for DexGuard, the Android app optimizer and obfuscator.
#
# You can enable DexGuard for Ant builds as follows:
# 1) Define dexguard.dir in local.properties in your Android project, e.g.
#      dexguard.dir=/usr/local/dexguard
# 2) Copy the following files from ${dexguard.dir}/ant to your Android project:
#      custom_rules.xml
#      dexguard-project.txt
#
# The build process will automatically pick up custom options from the
# following (optional) configuration files:
#      dexguard-project.txt
#      dexguard-project-debug.txt   (for target 'debug')
#      dexguard-project-release.txt (for target 'release')
#      proguard-project.txt         (for backward compatibility with ProGuard)
#
# You can adapt this file to suit your needs.

# Uncomment the following line (or run Ant in verbose mode) to get statistics
# about the processed code.
-verbose

# Uncomment and adapt the following line to encrypt the specified class(es).
#-encryptclasses mypackage.MySecretClass

# Uncomment and adapt the following line to encrypt the specified string(s).
#-encryptstrings "MySecretString"

# Uncomment and adapt the following lines to access specified classes and
# class members by means of reflection. For good measure, you can then also
# encrypt the resulting strings.
#-accessthroughreflection class android.SomeClass {
#    int someField;
#    void someMethod(java.lang.String, int);
#}
#
#-encryptstrings "android.SomeClass", "someField", "someMethod",
#    "java.lang.String"
#

-dalvik
-repackageclasses ''
-allowaccessmodification
-optimizations !code/simplification/arithmetic
-keepattributes *Annotation*
-keepresourcexmlattributenames
    manifest/installLocation,
    manifest/versionCode,
    manifest/application/*/intent-filter/*/name
-dontwarn com.squareup.okhttp.**
-dontwarn com.facebook.**

# -printusage unused.txt
# -printmapping proguard/actionlauncher.map
# -renamesourcefileattribute Launcher
# -keepattributes SourceFile,LineNumberTable

-keep public class * extends android.app.Activity
-keep public class * extends android.app.Application
-keep public class * extends android.app.Service
-keep public class * extends android.content.BroadcastReceiver
-keep public class * extends android.content.ContentProvider

-keep public class * extends android.view.View {
    public <init>(android.content.Context);
    public <init>(android.content.Context, android.util.AttributeSet);
    public <init>(android.content.Context, android.util.AttributeSet, int);
    public void set*(...);
}

-keep public class com.crittercism.**

-keepclassmembers public class com.crittercism.* {
    *;
}

-keep public class com.parse.**
-keep class com.parse.** { *; }

-keepclassmembers public class com.parse.* {
    *;
}

-keep public class * extends com.linkbubble.util.StatHatService.** { *; }

-keepclasseswithmembers class * {
    public <init>(android.content.Context, android.util.AttributeSet);
}

-keepclasseswithmembers class * {
    public <init>(android.content.Context, android.util.AttributeSet, int);
}

-keepclassmembers class * extends android.content.Context {
   public void *(android.view.View);
   public void *(android.view.MenuItem);
}

-keepclassmembers class * implements android.os.Parcelable {
    static android.os.Parcelable$Creator CREATOR;
}

-keepclassmembers class **.R$* {
    public static <fields>;
}

# Encrypt some important classes.
-encryptclasses
    com.google.android.vending.licensing.APKExpansionPolicy,
    com.google.android.vending.licensing.ServerManagedPolicy

# Encrypt license-related strings from the sample application.
#-encryptstrings class com.example.android.market.licensing.MainActivity {
#    private static final java.lang.String BASE64_PUBLIC_KEY;
#}

-encryptstrings
    "http://market.android.com/details?id=",
    "https://market.android.com/details?id=",
    "http://play.google.com/store/apps/details?id=",
    "https://play.google.com/store/apps/details?id=",
    "android_id"

# Encrypt all strings in the License Verification Library.
-encryptstrings class com.google.android.vending.licensing.**

# Access some run-time APIs through reflection, since these quite explicitly
# point to our license check and they are potential points of attack.
# We're writing them out here, but we could also have used wildcards.
# Additionally, encrypt the strings resulting from this reflection.
-accessthroughreflection class android.content.Context {
    android.content.pm.PackageManager getPackageManager();
}

-encryptstrings "android.content.Context",
    "getPackageManager"

-encryptclasses com.linkbubble.DRM, com.linkbubble.DRM$*
#-keepclassmembers class com.linkbubble.DRM {
#}

-encryptclasses com.linkbubble.util.Encrypt, com.linkbubble.util.Encrypt$*
-encryptstrings class com.linkbubble.util.Encrypt.**

-encryptstrings public class com.linkbubble.Constant {
    public static final java.lang.String TWITTER_ACCOUNT_TYPE;
    public static final java.lang.String YAHOO_ACCOUNT_TYPE;
}

-keepclassmembers class com.linkbubble.MainController {
    # ensure event handler functions are not stripped
    public void onBeginExpandTransition(com.linkbubble.MainController$BeginExpandTransitionEvent);
    public void onEndCollapseTransition(com.linkbubble.MainController$EndCollapseTransitionEvent);
    public void onEndExpandTransition(com.linkbubble.MainController$EndExpandTransitionEvent);
    public void onIncognitoModeChanged(com.linkbubble.ui.SettingsFragment$IncognitoModeChangedEvent);
    public void onStateChangedEvent(com.linkbubble.MainApplication$StateChangedEvent);
    public void onEndAnimateFinalTabAway(com.linkbubble.MainController$EndAnimateFinalTabAwayEvent);
}

-keep class com.linkbubble.MainApplication$StateChangedEvent
-keep class com.linkbubble.MainController$BeginAnimateFinalTabAwayEvent
-keep class com.linkbubble.MainController$BeginBubbleDragEvent
-keep class com.linkbubble.MainController$BeginCollapseTransitionEvent
-keep class com.linkbubble.MainController$BeginExpandTransitionEvent
-keep class com.linkbubble.MainController$CurrentTabChangedEvent
-keep class com.linkbubble.MainController$DraggableBubbleMovedEvent
-keep class com.linkbubble.MainController$EndAnimateFinalTabAwayEvent
-keep class com.linkbubble.MainController$EndBubbleDragEvent
-keep class com.linkbubble.MainController$EndCollapseTransitionEvent
-keep class com.linkbubble.MainController$EndExpandTransitionEvent
-keep class com.linkbubble.MainController$OrientationChangedEvent
-keep class com.linkbubble.db.HistoryRecord$ChangedEvent
-keep class com.linkbubble.Settings$LinkLoadTimeStatsUpdatedEvent
-keep class com.linkbubble.ui.ExpandedActivity$EnableHotwordSeviceEvent
-keep class com.linkbubble.ui.ExpandedActivity$MinimizeExpandedActivityEvent
-keep class com.linkbubble.ui.SettingsFragment$IncognitoModeChangedEvent

-keepclassmembers class com.linkbubble.ui.BubbleTargetView {
    # ensure event handler functions are not stripped
    public void onBeginBubbleDrag(com.linkbubble.MainController$BeginBubbleDragEvent);
    public void onDraggableBubbleMovedEvent(com.linkbubble.MainController$DraggableBubbleMovedEvent);
    public void onEndBubbleDragEvent(com.linkbubble.MainController$EndBubbleDragEvent);
}

-keepclassmembers class com.linkbubble.ui.CanvasView {
    # ensure event handler functions are not stripped
    public void onBeginAnimateFinalTabAway(com.linkbubble.MainController$BeginAnimateFinalTabAwayEvent);
    public void onBeginBubbleDrag(com.linkbubble.MainController$BeginBubbleDragEvent);
    public void onBeginCollapseTransition(com.linkbubble.MainController$BeginCollapseTransitionEvent);
    public void onBeginExpandTransition(com.linkbubble.MainController$BeginExpandTransitionEvent);
    public void onCurrentTabChanged(com.linkbubble.MainController$CurrentTabChangedEvent);
    public void onEndBubbleDragEvent(com.linkbubble.MainController$EndBubbleDragEvent);
    public void onEndCollapseTransition(com.linkbubble.MainController$EndCollapseTransitionEvent);
    public void onOrientationChanged(com.linkbubble.MainController$OrientationChangedEvent);
}

-keepclassmembers class com.linkbubble.ui.CloseTabTargetView {
    # ensure event handler functions are not stripped
    public void onBeginBubbleDrag(com.linkbubble.MainController$BeginBubbleDragEvent);
    public void onDraggableBubbleMovedEvent(com.linkbubble.MainController$DraggableBubbleMovedEvent);
    public void onEndBubbleDragEvent(com.linkbubble.MainController$EndBubbleDragEvent);
}

-keepclassmembers class com.linkbubble.ui.ExpandedActivity {
    # ensure event handler functions are not stripped
    public void onBeginCollapseTransition(com.linkbubble.MainController$BeginCollapseTransitionEvent);
    public void onEnableHotwordSevice(com.linkbubble.ui.ExpandedActivity$EnableHotwordSeviceEvent);
    public void onMinimizeExpandedActivity(com.linkbubble.ui.ExpandedActivity$MinimizeExpandedActivityEvent);
}

-keepclassmembers class com.linkbubble.ui.HistoryActivity {
    # ensure event handler functions are not stripped
    public void onHistoryRecordChangedEvent(com.linkbubble.db.HistoryRecord$ChangedEvent);
}

-keepclassmembers class com.linkbubble.ui.HomeActivity {
    # ensure event handler functions are not stripped
    public void onLinkLoadTimeStatsUpdatedEvent(com.linkbubble.Settings$LinkLoadTimeStatsUpdatedEvent);
    public void onStateChangedEvent(com.linkbubble.MainApplication$StateChangedEvent);
    public void onTrialTimeStartTimeReceivedEvent(com.linkbubble.MainApplication$TrialTimeStartTimeReceivedEvent);
}

-keep public interface com.android.vending.licensing.ILicensingService

-dontwarn android.support.**

-keepnames class * implements java.io.Serializable

-keepclassmembers class * implements java.io.Serializable {
    static final long serialVersionUID;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    !static !transient <fields>;
    private void writeObject(java.io.ObjectOutputStream);
    private void readObject(java.io.ObjectInputStream);
    java.lang.Object writeReplace();
    java.lang.Object readResolve();
}

-accessthroughreflection class android.content.pm.PackageManager {
    int checkSignatures(int, int);
    int checkSignatures(java.lang.String, java.lang.String);
    android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName, int);
    java.util.List queryInstrumentation(java.lang.String, int);
    android.content.pm.PackageInfo getPackageInfo(java.lang.String, int);
    android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String, int);
}

-encryptstrings "android.content.pm.PackageManager",
    "checkSignatures",
    "getInstrumentationInfo",
    "queryInstrumentation",
    "getPackageInfo",
    "getPackageArchiveInfo",
    "java.lang.String",
    "java.util.List",
    "android.content.pm.InstrumentationInfo",
    "android.content.ComponentName"

-accessthroughreflection class android.content.pm.PackageInfo {
    java.lang.String                         packageName;
    java.lang.String                         versionName;
    int                                      versionCode;
    long                                     firstInstallTime;
    long                                     lastUpdateTime;
    android.content.pm.Signature[]           signatures;
    android.content.pm.InstrumentationInfo[] instrumentation;
}

-encryptstrings "android.content.pm.PackageInfo",
    "packageName",
    "versionName",
    "versionCode",
    "firstInstallTime",
    "lastUpdateTime",
    "signatures",
    "instrumentation",
    "java.lang.String",
    "android.content.pm.Signature",
    "android.content.pm.InstrumentationInfo"

-accessthroughreflection class android.content.pm.Signature {
    byte[]           toByteArray();
    char[]           toChars();
    java.lang.String toCharsString();
}

-encryptstrings "android.content.pm.Signature",
    "toByteArray",
    "toChars",
    "toCharsString",
    "java.lang.String"

# Uncomment and adapt the following lines to properly handle Javascript
# interface classes for WebView.
-keep class com.linkbubble.util.PageInspector$JSEmbedHandler
-keepclassmembers class com.linkbubble.util.PageInspector$JSEmbedHandler {
    public <methods>;
}

-keep class * extends java.util.ListResourceBundle {
    protected Object[][] getContents();
}

-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {
    public static final *** NULL;
}

-keepnames @com.google.android.gms.common.annotation.KeepName class *
-keepclassmembernames class * {
    @com.google.android.gms.common.annotation.KeepName *;
}

-keepnames class * implements android.os.Parcelable {
    public static final ** CREATOR;
}

-keepclassmembers enum * {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}

# Uncomment the following lines to remove Android logging code
# (although you may want to keep error-level messages).
-assumenosideeffects class android.util.Log {
    public static boolean isLoggable(java.lang.String, int);
    public static int v(...);
    public static int i(...);
    public static int w(...);
    public static int d(...);
    public static int e(...);
    public static java.lang.String getStackTraceString(java.lang.Throwable);
}

# If your application seems to fail due to the optimization or obfuscation
# in release builds, you can verify that by selectively disabling any of the
# processing steps. You may then need to add some additional configuration
# (see manual). Debug builds already disable these steps by default.
#-dontshrink
#-dontoptimize
#-dontobfuscate
