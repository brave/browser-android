buildscript {
    repositories {
        mavenCentral()
        flatDir { dirs '../../DexGuard/lib' }
        maven { url 'http://download.crashlytics.com/maven' }
    }
    dependencies {
        classpath ':dexguard:'
        classpath 'com.android.tools.build:gradle:0.8.0'
        classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'
    }
}

// Manifest version information!
def versionMajor = 0
def versionMinor = 9
def versionPatch = 0
def versionBuild = 1 // bump for dogfood builds, public betas, etc.

apply plugin: 'android'
//apply plugin: 'dexguard'
apply plugin: 'crashlytics'

repositories {
    mavenCentral()
    maven { url 'http://download.crashlytics.com/maven' }
}

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))

android {
    compileSdkVersion 19
    buildToolsVersion '19.0.0'
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 19

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""

    }

    productFlavors {
        playstore {
            packageName='com.linkbubble.playstore'

            buildConfigField "String", "STORE_PACKAGE", "\"com.android.vending\""
            buildConfigField "String", "STORE_URL_PREFIX", "\"http://play.google.com/store/apps/details?id=\""
            buildConfigField "String", "STORE_FREE_URL", "\"http://play.google.com/store/apps/details?id=com.linkbubble.playstore\""
            buildConfigField "String", "STORE_PRO_URL", "\"http://play.google.com/store/apps/details?id=com.linkbubble.pro.playstore\""
        }
    }

    signingConfigs {
        release {
            // (via http://stackoverflow.com/a/19350401/328679)
            storeFile file(System.getenv("KEYSTORE_LOCATION"))
            keyAlias System.getenv("LINK_BUBBLE_KEY_ALIAS")

            // These two lines make gradle believe that the signingConfigs
            // section is complete. Without them, tasks like installRelease
            // will not be available!
            storePassword "notYourRealPassword"
            keyPassword "notYourRealPassword"
        }
    }
    buildTypes {
        debug {
            //packageNameSuffix '.dev'
            versionNameSuffix '-dev'
        }

        release {
            //proguardFile plugin.getDefaultDexGuardFile('dexguard-release.pro')
            //proguardFile 'dexguard-project.txt'
            proguardFile 'proguard-project.txt'
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        lintConfig file("lint.xml")
    }
}

dependencies {
    compile 'com.android.support:support-v4:19.0.+'
    compile 'se.emilsjolander:stickylistheaders:2.1.2'
    compile 'com.crashlytics.android:crashlytics:1.+'
    compile 'com.squareup.retrofit:retrofit:1.4.1'
    compile files('libs/otto-1.3.4.jar')
    compile files('libs/picasso-2.1.1.jar')
    compile files('libs/dexguard_util.jar')
    compile files('libs/Parse-1.4.1.jar')
    //compile project(':Libraries:ViewPagerIndicator:library')
}

task askForPasswords << {
    // Must create String because System.readPassword() returns char[]
    // (and assigning that below fails silently)
    def storePw = new String(System.console().readPassword("Keystore password: "))
    def keyPw  = new String(System.console().readPassword("Key password: "))

    android.signingConfigs.release.storePassword = storePw
    android.signingConfigs.release.keyPassword = keyPw
}

tasks.whenTaskAdded { theTask ->
    if (theTask.name.equals("packagePlaystoreRelease")) {
        theTask.dependsOn "askForPasswords"
    }
}

task showVersion << {
    println buildscript.configurations.classpath.resolvedConfiguration.firstLevelModuleDependencies.moduleVersion
}

clean.dependsOn showVersion
